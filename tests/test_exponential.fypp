#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
program test_distribution_expon
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only : random_seed
    use statislib_exponential, expon_rvs => exponential_distribution_rvs,      &
                               expon_pdf => exponential_distribution_pdf,      &
                               expon_cdf => exponential_distribution_cdf

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get

    put = 12345678
    call random_seed(put, get)

    call test_exponential_random_generator

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_rvs_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_pdf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_cdf_${t1[0]}$${k1}$
    #:endfor




contains


    subroutine test_exponential_random_generator

        integer, parameter :: num = 10000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct

        print *, ""
        print *, "Test exponential random generator with chi-squared"
        freq = 0
        do i = 1, num
            j = array_size * (1.0 - exp(- expon_rvs(1.0)))
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        expct = num / array_size
        do i = 0, array_size - 1
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for exponential random generator is : ", chisq
        call check((chisq < 1143.9), &
               msg="exponential randomness failed chi-squared test", warn=warn)
    end subroutine test_exponential_random_generator




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_rvs_${t1[0]}$${k1}$

        ${t1}$ :: res(10), scale
        iinteger, parameter :: k = 5
        integer :: i, n, seed, get
        #:if t1[0] == "r"
        ${t1}$, parameter :: ans(10) =                                         &
                            [1.37178108290154243675829093263018876_${k1}$,     &
                            0.309467303067628429769087006206973456_${k1}$,     &
                            0.303573393522570872393728791394096334_${k1}$,     &
                             3.00973636550766943109636031294940040_${k1}$,     &
                            0.250084097046766984373533659891108982_${k1}$,     &
                             1.20139122141795795517538181229610927_${k1}$,     &
                             4.43019214257137261547825346497120336_${k1}$,     &
                            0.835001950484080046610557701569632627_${k1}$,     &
                             1.82681711031524329769126779865473509_${k1}$,     &
                            0.910435173630070204708886194566730410_${k1}$]
        #:else
        ${t1}$, parameter :: ans(10) =                                         &
                           [(0.640164505354053137153869101894088070_${k1}$,    &
                             0.268204995991944639133208738712710328_${k1}$),   &
                            (0.141667583643866407117073435983911608_${k1}$,    &
                              2.60843818343998017361684560455614716_${k1}$),   &
                            (0.116705911955157926040982374615850854_${k1}$,    &
                              1.04120572522889689448533090398996145_${k1}$),   &
                             (2.06742299986664055388985161698656149_${k1}$,    &
                             0.723668357086202707062483341360348315_${k1}$),   &
                            (0.852514651480446872255924972705542983_${k1}$,    &
                             0.789043817146060844081034701957833041_${k1}$),   &
                             (1.09098446025458177821576555288629603_${k1}$,    &
                              1.48569478096399141264782883808948111_${k1}$),   &
                             (4.29633077423243321391055360436439499_${k1}$,    &
                             0.338216396454583145825267820328008412_${k1}$),   &
                            (0.340462754402863337910289942556119029_${k1}$,    &
                             0.172319442815022222381671213042864120_${k1}$),   &
                       6.932352666201882229746189523211795805E-0002_${k1}$,    &
                       6.742518436285274002761624956292507704E-0002_${k1}$),   &
                             (1.03231628501970258415809666985296648_${k1}$,    &
                             0.421413014732743429480166241773986277_${k1}$)]
        #:endif

        print *, "Test exponential_distribution_rvs_${t1[0]}$${k1}$"
        seed = 593742186
        call random_seed(seed, get)
        #:if t1[0] == "r"
        scale = 1.5_${k1}$
        #:else
        scale = (0.7_${k1}$, 1.3_${k1}$)
        #:endif
        do i = 1, 5
            res(i) = expon_rvs(scale)
        end do
        res(6:10) = expon_rvs(scale, k)
        call check(all(abs(res - ans) < ${k1}$tol),                            &
            msg="exponential_distribution_rvs_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_pdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), scale
        integer :: i, n
        integer :: seed, get
        real :: res(3,5)
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                         [6.14960417E-02, 6.14960417E-02, 6.14960417E-02,      &
                          1.38718796, 0.729365528, 1.67107172E-02, 0.296734482,&
                          2.36971565E-02, 4.06475700E-02, 1.18497872,          &
                          8.39852914E-02, 1.36920142, 1.54058458E-02,          &
                          3.20194475E-02, 0.603879571]
        #:else
        real, parameter :: ans(15) =                                           &
                         [0.386471182, 0.386471182,0.386471182,2.79592793E-03, &
                          4.01333207E-03, 0.317740440, 0.385551631,            &
                          5.02163777E-03, 0.372386932, 6.09764457E-03,         &
                          0.273956627, 0.407586545, 1.59074657E-03,            &
                          0.136133000, 0.399842113]
        #:endif

        print *, "Test exponential_distribution_pdf_${t1[0]}$${k1}$"
        seed = 123987654
        call random_seed(seed, get)
        #:if t1[0] == "r"
        scale = 1.5_${k1}$
        #:else
        scale = (0.3_${k1}$, 1.6_${k1}$)
        #:endif
        x1 = expon_rvs(scale)
        x2 = reshape(expon_rvs(scale, 12), [3,4])
        res(:,1) = expon_pdf(x1, scale)
        res(:, 2:5) = expon_pdf(x2, scale)
        call check(all(abs(res - reshape(ans, [3,5])) < ${k1}$tol),            &
            msg="exponential_distribution_pdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_pdf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), scale
        integer :: i, n
        integer :: seed, get
        real :: res(3,5)
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                         [0.370481908, 0.370481908, 0.370481908, 0.993631542,  &
                          0.246292457, 0.497423291, 0.999946773, 0.995101511,  &
                          0.305115670, 0.932980001, 0.967154086, 0.777015686,  &
                          0.983209372, 8.37164521E-02, 0.275721848]
        #:else
        real, parameter :: ans(15) =                                           &
                         [0.176930442, 0.176930442, 0.176930442,5.98644912E-02,&
                          0.981560826, 0.135309443, 0.617795825,7.55468532E-02,&
                          0.118341751, 0.484595388, 0.794088185, 0.912919402,  &
                          0.914170802, 0.370377690, 0.793968141]
        #:endif

        print *, "Test exponential_distribution_cdf_${t1[0]}$${k1}$"
        seed = 621957438
        call random_seed(seed, get)

        #:if t1[0] == "r"
        scale = 2.0_${k1}$
        #:else
        scale = (1.3_${k1}$, 2.1_${k1}$)
        #:endif
        x1 = expon_rvs(scale)
        x2 = reshape(expon_rvs(scale, 12), [3,4])
        res(:,1) = expon_cdf(x1, scale)
        res(:, 2:5) = expon_cdf(x2, scale)
        call check(all(abs(res - reshape(ans,[3,5])) < ${k1}$tol),             &
            msg="exponential_distribution_cdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_cdf_${t1[0]}$${k1}$

    #:endif
end program test_distribution_expon
