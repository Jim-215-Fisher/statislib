#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
program test_distribution_expon
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only : random_seed
    use statislib, only : expon_rvs => exponential_distribution_rvs,      &
                          expon_pdf => exponential_distribution_pdf,      &
                          expon_cdf => exponential_distribution_cdf

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get

    put = 12345678
    call random_seed(put, get)

    call test_exponential_random_generator

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_rvs_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_pdf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_cdf_${t1[0]}$${k1}$
    #:endfor




contains


    subroutine test_exponential_random_generator

        integer, parameter :: num = 10000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct

        print *, ""
        print *, "Test exponential random generator with chi-squared"
        freq = 0
        do i = 1, num
            j = array_size * (1.0 - exp(- expon_rvs(1.0)))
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        expct = num / array_size
        do i = 0, array_size - 1
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for exponential random generator is : ", chisq
        call check((chisq < 1143.9), &
               msg="exponential randomness failed chi-squared test", warn=warn)
    end subroutine test_exponential_random_generator




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_rvs_${t1[0]}$${k1}$

        ${t1}$ :: res(10), scale
        integer, parameter :: k = 5
        integer :: i, n, seed, get
        #:if t1[0] == "r"
        ${t1}$, parameter :: ans(10) =                                         &
                             [0.609680481289574416337018192280083895_${k1}$,   &
                              0.137541023585612635452927558314210417_${k1}$,   &
                              0.134921508232253721063879462841820585_${k1}$,   &
                               1.33766060689229752493171569464417802_${k1}$,   &
                              0.111148487576340881943792737729381770_${k1}$,   &
                              0.533951653963536868966836361020492979_${k1}$,   &
                               1.96897428558727671799033487332053483_${k1}$,   &
                              0.371111977992924465160247867364281152_${k1}$,   &
                              0.811918715695663687862785688290993341_${k1}$,   &
                              0.404637854946697868759504975362991277_${k1}$]
        #:else
        ${t1}$, parameter :: ans(10) =                                         &
                             [(1.30645817419194517786503898345732266_${k1}$,   &
                              0.158701181060322271676454874977935106_${k1}$),  &
                             (0.289117517640543687994027420375329869_${k1}$,   &
                               1.54345454641418945184428733997405138_${k1}$),  &
                             (0.238175330520730461308127295134389521_${k1}$,   &
                              0.616098062265619464192503493485184250_${k1}$),  &
                              (4.21923061197273582426500329997257485_${k1}$,   &
                              0.428206128453374382877209077728016710_${k1}$),  &
                              (1.73982581934785075970596933205212874_${k1}$,   &
                              0.466889832630805233184044202341912994_${k1}$),  &
                              (2.22649889847873832288931745486999202_${k1}$,   &
                              0.879109337848515628785697537331053851_${k1}$),  &
                              (8.76802198822945553859296653951917464_${k1}$,   &
                              0.200128045239398311139211728004738688_${k1}$),  &
                             (0.694821947760945587572020290930855262_${k1}$,   &
                              0.101964167346166995492113143812345625_${k1}$),  &
                             (0.141476585024528208770330398432893829_${k1}$,   &
                        3.989655879458742013468417133900891716E-0002_${k1}$),  &
                              (2.10676792861163792685325850990401309_${k1}$,   &
                              0.249356813451327473065187125310051027_${k1}$)]
        #:endif

        print *, "Test exponential_distribution_rvs_${t1[0]}$${k1}$"
        seed = 593742186
        call random_seed(seed, get)
        #:if t1[0] == "r"
        scale = 1.5_${k1}$
        #:else
        scale = (0.7_${k1}$, 1.3_${k1}$)
        #:endif
        do i = 1, 5
            res(i) = expon_rvs(scale)
        end do
        res(6:10) = expon_rvs(scale, k)
        call check(all(abs(res - ans) < ${k1}$tol),                            &
            msg="exponential_distribution_rvs_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_pdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), scale
        integer :: i, n
        integer :: seed, get
        real :: res(3,5)
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                           [0.362692297, 0.362692297, 0.362692297, 1.44877088, &
                            1.08871758, 0.203258395, 0.730004191, 0.237394854, &
                            0.301732183, 1.35079277, 0.416578263, 1.44039178,  &
                            0.196044832, 0.271373808, 1.00108993]
        #:else
        real, parameter :: ans(15) =                                           &
                        [0.112097718, 0.112097718, 0.112097718, 4.72087488E-02,&
                         3.69705036E-02, 8.69498998E-02, 0.128007650,          &
                         1.13496408E-02, 0.294260502, 4.66169827E-02,          &
                         2.84438692E-02, 0.161859304, 4.22904789E-02,          &
                         0.176117986, 0.107352339]
        #:endif

        print *, "Test exponential_distribution_pdf_${t1[0]}$${k1}$"
        seed = 123987654
        call random_seed(seed, get)
        #:if t1[0] == "r"
        scale = 1.5_${k1}$
        #:else
        scale = (0.3_${k1}$, 1.6_${k1}$)
        #:endif
        x1 = expon_rvs(scale)
        x2 = reshape(expon_rvs(scale, 12), [3,4])
        res(:,1) = expon_pdf(x1, scale)
        res(:, 2:5) = expon_pdf(x2, scale)
        call check(all(abs(res - reshape(ans, [3,5])) < sptol),            &
            msg="exponential_distribution_pdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_pdf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), scale
        integer :: i, n
        integer :: seed, get
        real :: res(3,5)
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                           [0.109257743, 0.109257743, 0.109257743, 0.717506349,&
                            6.82471767E-02, 0.158022299, 0.914579570,          &
                            0.735445082, 8.69845450E-02, 0.491195351,          &
                            0.574283540, 0.312823027, 0.640029788,             &
                            2.16202121E-02, 7.74788111E-02]
        #:else
        real, parameter :: ans(15) =                                           &
                           [7.83931240E-02, 7.83931240E-02, 7.83931240E-02,    &
                            1.07845757E-02, 0.672623038, 4.27264050E-02,       &
                            0.179649115, 1.38375796E-02, 3.49246375E-02,       &
                            0.116869956, 0.468462735, 0.413506985, 0.665679693,&
                            0.223748595, 0.337722957]
        #:endif

        print *, "Test exponential_distribution_cdf_${t1[0]}$${k1}$"
        seed = 621957438
        call random_seed(seed, get)

        #:if t1[0] == "r"
        scale = 2.0_${k1}$
        #:else
        scale = (1.3_${k1}$, 2.1_${k1}$)
        #:endif
        x1 = expon_rvs(scale)
        x2 = reshape(expon_rvs(scale, 12), [3,4])
        res(:,1) = expon_cdf(x1, scale)
        res(:, 2:5) = expon_cdf(x2, scale)
        call check(all(abs(res - reshape(ans,[3,5])) < ${k1}$tol),             &
            msg="exponential_distribution_cdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_cdf_${t1[0]}$${k1}$

    #:endfor
end program test_distribution_expon
