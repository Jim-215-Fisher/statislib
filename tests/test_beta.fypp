#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
program test_distribution_beta
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only : random_seed
    use statislib_beta, beta_rvs => beta_distribution_rvs,                     &
                        beta_pdf => beta_distribution_pdf,                     &
                        beta_cdf => beta_distribution_cdf

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get

    put = 1234567
    call random_seed(put, get)

    call test_beta_random_generator

    #:for k1, t1 in RC_KINDS_TYPES
    call test_beta_rvs_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_beta_pdf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_beta_cdf_${t1[0]}$${k1}$
    #:endfor






contains

    subroutine test_beta_random_generator

        integer, parameter :: num = 1000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct

        print *, ""
        print *, "Test beta random generator with chi-squared"
        freq = 0
        do i = 1, num
            j = array_size * beta_cdf(beta_rvs(2.0,1.5),2.0,1.5)
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        expct = num / array_size
        do i = 0, array_size - 1
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for beta random generator is : ", chisq
        call check((chisq < 1143.9),                                           &
               msg="beta randomness failed chi-squared test", warn=warn)
    end subroutine test_beta_random_generator




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_beta_rvs_${t1[0]}$${k1}$

        ${t1}$ :: res(10), a, b
        integer, parameter :: k = 5
        integer :: i, n, put, get
        #:if t1[0] == "r"
        ${t1}$, parameter :: ans(10) =                                         &
                            [0.744399697952416243334363353017662363_${k1}$,    &
                             0.785582064888561104409969900319307115_${k1}$,    &
                             0.290228167791285215460609614976244262_${k1}$,    &
                             0.540957122824810300186112642749043673_${k1}$,    &
                             0.866783498753591906081043187617603418_${k1}$,    &
                             0.164859290722944895746841956125886140_${k1}$,    &
                             0.752018475270934089892015814754187410_${k1}$,    &
                             0.535463312713066631219371237676531884_${k1}$,    &
                             0.438125081488452966935618841567308566_${k1}$,    &
                             0.635255468090749026953184924665020348_${k1}$]
        #:else
        ${t1}$, parameter :: ans(10) =                                         &
                            [(0.996593894945797558163416198727906880_${k1}$,   &
                              0.132598000233262366166275960014792683_${k1}$),  &
                             (0.390100279193128267998817589162392551_${k1}$,   &
                              0.594960539319605102054215589048597662_${k1}$),  &
                             (0.839296137442072004654073615963339625_${k1}$,   &
                              0.811403350202500212373591232224849046_${k1}$),  &
                             (0.915863048173886740665234455471312086_${k1}$,   &
                              0.791004162831226427993329892479385152_${k1}$),  &
                             (0.449544461366363638651136427537418482_${k1}$,   &
                        6.648931970435189824360854746280901949E-0002_${k1}$),  &
                             (0.418599563122841869588123385796545717_${k1}$,   &
                        2.682053757872834248817007196452821345E-0002_${k1}$),  &
                             (0.847048136644577210744803917816801455_${k1}$,   &
                              0.728350780933130458744978339193529096_${k1}$),  &
                             (0.859055679164195250196327014741975834_${k1}$,   &
                              0.677632443230547158536307254984227248_${k1}$),  &
                             (0.251814018668272502730175719600969280_${k1}$,   &
                        6.410086007672458486925924399711432844E-0003_${k1}$),  &
                             (0.656763996944608477801486502669830627_${k1}$,   &
                              0.870919913077248989108181221896598931_${k1}$)]
        #:endif

        print *, "Test beta_distribution_rvs_${t1[0]}$${k1}$"
        put = 639741825
        call random_seed(put, get)
        #:if t1[0] == "r"
        a = 2.0_${k1}$; b = 1.0_${k1}$
        #:else
        a = (2.0_${k1}$, 0.7_${k1}$); b = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        do i = 1, 5
            res(i) = beta_rvs(a, b)
        end do
        res(6:10) = beta_rvs(a, b, k)
        call check(all(abs(res - ans) < ${k1}$tol),                            &
            msg="beta_distribution_rvs_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_beta_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_beta_pdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), a, b
        real :: res(3,5)
        integer :: i, n
        integer :: put, get
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                         [1.97584832, 1.97584832, 1.97584832, 1.94792151,      &
                          1.05610514, 1.63085556, 1.44469929, 1.78598392,      &
                          1.03530371, 1.32163048, 1.95935822, 1.49064910,      &
                          1.22708333, 0.816426575, 1.93443334]
        #:else
        real, parameter :: ans(15) =                                           &
                         [2.79032898, 2.79032898, 2.79032898, 0.831092536,     &
                          0.859560609, 0.833086491, 2.18498087, 0.611756265,   &
                          5.17011976, 0.805453956, 2.12247658, 0.969030082,    &
                          1.92922175, 0.700230777, 6.4548239]
        #:endif

        print *, "Test beta_distribution_pdf_${t1[0]}$${k1}$"
        put = 345987126
        call random_seed(put, get)
        #:if t1[0] == "r"
        a = 2.0_${k1}$; b = 1.0_${k1}$
        #:else
        a = (2.0_${k1}$, 0.7_${k1}$); b = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        x1 = beta_rvs(a, b)
        x2 = reshape(beta_rvs(a, b, 12), [3,4])
        res(:,1) = beta_pdf(x1, a, b)
        res(:, 2:5) = beta_pdf(x2, a, b)
        call check(all(abs(res - reshape(ans, [3,5])) < sptol),                &
            msg="beta_distribution_pdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_beta_pdf_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_beta_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), a, b
        real :: res(3,5)
        integer :: i, n
        integer :: put, get
        #:if t1[0] == "r"
        real :: ans(15) = [0.153344765, 0.153344765, 0.153344765, 0.639326215,  &
                           0.227737889, 0.832331538, 0.215463713, 0.609950244,  &
                           0.552298367, 0.936580479, 0.473157555, 0.375768840,  &
                           2.33022049E-02, 0.907276988, 0.230596066]
        #:else
        real :: ans(15) = [7.06288144E-02, 7.06288144E-02, 7.06288144E-02,      &
                           3.14221904E-02, 0.229956210, 4.80622090E-02,         &
                           0.495213449, 0.541507423, 0.105880715, 0.194856107,  &
                           3.40392105E-02, 1.09316744E-02, 0.180127904,         &
                           0.654031873, 0.406583667]
        #:endif

        print *, "Test beta_distribution_cdf_${t1[0]}$${k1}$"
        put = 567985123
        call random_seed(put, get)
        #:if t1[0] == "r"
        a = 2.0_${k1}$; b = 2.0_${k1}$
        #:else
        a = (2.0_${k1}$, 0.7_${k1}$); b = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        x1 = beta_rvs(a, b)
        x2 = reshape(beta_rvs(a, b, 12), [3,4])
        res(:,1) = beta_cdf(x1, a, b)
        res(:, 2:5) = beta_cdf(x2, a, b)
        call check(all(abs(res - reshape(ans,[3,5])) < sptol), &
            msg="beta_distribution_cdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_beta_cdf_${t1[0]}$${k1}$

    #:endfor
end program test_distribution_beta
