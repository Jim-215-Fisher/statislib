#:include "common.fypp"
program test_distribution_poisson
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only : random_seed
    use statislib, only : pois_rvs => poisson_distribution_rvs, &
                          pois_pmf => poisson_distribution_pmf, &
                          pois_cdf => poisson_distribution_cdf
    use special_function, only : lgf => log_factorial

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get


    put = 1234567
    call random_seed(put, get)

    call test_poisson_random_generator

    call test_poisson_rvs

    #:for k1, t1 in INT_KINDS_TYPES
    call test_poisson_pmf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
    call test_poisson_cdf_${t1[0]}$${k1}$
    #:endfor





contains

    subroutine test_poisson_random_generator
    
        integer, parameter :: num = 10000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct
        real :: p

        print *, ""
        print *, "Test poisson random generator with chi-squared"
        freq = 0; p = 3.4
        do i = 1, num
            j = pois_rvs(p)
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        do i = 0, array_size - 1
           expct = num * exp(i * log(p) - p - lgf(i) )
           if(expct < 1.0e-7) cycle
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for poisson random generator is : ", chisq
        call check((chisq < 1143.9),                                           &
               msg="poisson randomness failed chi-squared test", warn=warn)
    end subroutine test_poisson_random_generator




    subroutine test_poisson_rvs
    
        real :: p
        integer :: seed, get, res(10), i
        integer, parameter :: ans(10) = [5, 6, 3, 12, 4, 2, 6, 7, 6, 11]

        print *, "Test poisson_distribution_rvs"
        seed = 852693417
        call random_seed(seed, get)
        p = 4.7
        do i = 1, 5
          res(i) = pois_rvs(p)
        end do
        res(6:10) = pois_rvs(p, 5)
        call check(all(res == ans), &
            msg="poisson_distribution_rvs failed", warn=warn)
    end subroutine test_poisson_rvs




    #:for k1, t1 in INT_KINDS_TYPES
    subroutine test_poisson_pmf_${t1[0]}$${k1}$
    
        ${t1}$ :: x1, x2(2,3,3)
        integer :: seed, get
        real :: p, res(2,3,4)
        real, parameter :: ans(24) =                                           &
                         [0.154935688, 0.154935688, 0.154935688, 0.154935688,  &
                          0.154935688, 0.154935688, 0.124948151, 0.160100266,  &
                          0.154935688, 8.06117207E-02,0.160100266, 0.109897397,&
                          0.154935688, 0.141802981,8.06117207E-02,0.160100266, &
                          0.160100266, 0.160100266,0.109897397, 8.06117207E-02,&
                          4.69383672E-02, 0.154935688, 0.141802981, 0.124948151]

        print *, "Test poisson_distribution_pmf_${k1}$"
        seed = 630852741
        call random_seed(seed, get)
        p = 6.2
        x1 = pois_rvs(p)
        x2 = reshape(pois_rvs(p, 18), [2,3,3])
        res(:,:,1) = pois_pmf(x1, p)
        res(:,:,2:4) = pois_pmf(x2, p)
        call check(all(abs(res - reshape(ans, [2,3,4])) < sptol),              &
            msg="poisson_distribution_pmf_${k1}$ failed", warn=warn)
    end subroutine test_poisson_pmf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in INT_KINDS_TYPES
    subroutine test_poisson_cdf_${t1[0]}$${k1}$
    
        ${t1}$ :: x(2,3,4)
        integer :: seed, get
        real :: p, res(2,3,4)
        real, parameter :: ans(24) =                                           &
                         [0.957978964, 0.995753288, 0.891178012, 0.287297487,  &
                          8.20850134E-02,0.287297487, 0.891178012, 0.891178012,&
                          0.957978964, 0.543813109, 0.287297487, 0.287297487,  &
                          0.891178012, 0.543813109, 0.543813109, 0.287297487,  &
                          0.543813109, 0.543813109, 0.985812664, 0.543813109,  &
                          0.543813109, 0.543813109, 0.757576108, 8.20850134E-02]

        print *, "Test poisson_distribution_cdf_${k1}$"
        seed = 17428396
        call random_seed(seed, get)
        p = 2.5
        x = reshape(pois_rvs(p, 24), [2,3,4])
        res(:,:,:) = pois_cdf(x, p)
        call check(all(abs(res - reshape(ans, [2,3,4])) < sptol),              &
            msg="poisson_distribution_cdf_${k1}$ failed", warn=warn)
    end subroutine test_poisson_cdf_${t1[0]}$${k1}$

  #:endfor

end program test_distribution_poisson
