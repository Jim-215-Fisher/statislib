#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
program test_distribution_gamma
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only: random_seed
    use statislib_gamma, gamma_rvs => gamma_distribution_rvs,                  &
                         gamma_pdf => gamma_distribution_pdf,                  &
                         gamma_cdf => gamma_distribution_cdf

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get

    put = 1234567
    call random_seed(put, get)

    call test_gamma_random_generator

    #:for k1, t1 in RC_KINDS_TYPES
    call test_gamma_rvs_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_gamma_pdf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in RC_KINDS_TYPES
    call test_gamma_cdf_${t1[0]}$${k1}$
    #:endfor




contains


    subroutine test_gamma_random_generator

        integer, parameter :: num = 10000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct

        print *, ""
        print *, "Test gamma random generator with chi-squared"
        freq = 0
        do i = 1, num
            j = array_size * gamma_cdf(gamma_rvs(2.0,1.5),2.0,1.5)
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        expct = num / array_size
        do i = 0, array_size - 1
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for gamma random generator is : ", chisq
        call check((chisq < 1143.9),                                           &
               msg="gamma randomness failed chi-squared test", warn=warn)
    end subroutine test_gamma_random_generator




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_rvs_${t1[0]}$${k1}$

        ${t1}$ :: res(10), gshape, scale
        integer, parameter :: k = 5
        integer :: i, n, put, get
        #:if t1[0] == "r"
        ${t1}$, parameter :: ans(10) =                                         &
                            [0.857589039350877514111471181067133115_${k1}$,    &
                              1.02066235929592669341367273855793615_${k1}$,    &
                             0.997539313039285858469791992057480517_${k1}$,    &
                             0.976533566171099213454202419140525167_${k1}$,    &
                             0.418534850809151373739671312677149231_${k1}$,    &
                              2.20122874546440374485431246113130646_${k1}$,    &
                              2.06395422779089208145254668611859318_${k1}$,    &
                              3.17946689363011574223408637477787452_${k1}$,    &
                              1.93297441375957258760155732080675223_${k1}$,    &
                              1.02579597344383310585282655020137840_${k1}$]
        #:else
        ${t1}$, parameter :: ans(10) =                                         &
                            [(1.07198631763458251953125000000000000_${k1}$,    &
                             0.467755347490310668945312500000000000_${k1}$),   &
                            (0.423825174570083618164062500000000000_${k1}$,    &
                             0.963404953479766845703125000000000000_${k1}$),   &
                             (2.75153589248657226562500000000000000_${k1}$,    &
                             0.148371994495391845703125000000000000_${k1}$),   &
                             (1.45363664627075195312500000000000000_${k1}$,    &
                             0.568527400493621826171875000000000000_${k1}$),   &
                            (0.345591425895690917968750000000000000_${k1}$,    &
                       4.962176829576492309570312500000000000E-0002_${k1}$),   &
                             (1.96578848361968994140625000000000000_${k1}$,    &
                              3.11243152618408203125000000000000000_${k1}$),   &
                             (3.41551613807678222656250000000000000_${k1}$,    &
                       5.049489438533782958984375000000000000E-0002_${k1}$),   &
                            (0.945943951606750488281250000000000000_${k1}$,    &
                             0.456915855407714843750000000000000000_${k1}$),   &
                             (1.14931583404541015625000000000000000_${k1}$,    &
                             0.129447638988494873046875000000000000_${k1}$),   &
                             (2.96914696693420410156250000000000000_${k1}$,    &
                              1.16174089908599853515625000000000000_${k1}$)]
        #:endif

        print *, "Test gamma_distribution_rvs_${t1[0]}$${k1}$"
        put = 639741825
        call random_seed(put, get)
        #:if t1[0] == "r"
        gshape = 2.0_${k1}$; scale = 1.0_${k1}$
        #:else
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        do i = 1, 5
            res(i) = gamma_rvs(gshape, scale)
        end do
        res(6:10) = gamma_rvs(gshape, scale, k)
        call check(all(abs(res - ans) < ${k1}$tol),                            &
            msg="gamma_distribution_rvs_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_gamma_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_pdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), gshape, scale
        real :: res(3,5)
        integer :: i, n
        integer :: put, get
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                         [3.44954208E-02, 3.44954208E-02, 3.44954208E-02,      &
                          0.291166335, 0.283382922, 0.279222697, 0.364406645,  &
                          0.243792102,6.38156384E-02,0.258446008, 0.172681183, &
                          0.311812222, 0.240270957, 0.367655009, 9.90117192E-02]
        #:else
        real, parameter :: ans(15) =                                           &
                         [0.115542844,0.115542844,0.115542844, 9.26823243E-02, &
                          0.401668519, 0.374689817, 0.147123635, 0.225616276,  &
                          0.127654046, 3.91825065E-02, 2.58735381E-03,         &
                          0.101058327, 0.240440935, 4.98853484E-03, 0.110858262]
        #:endif

        print *, "Test gamma_distribution_pdf_${t1[0]}$${k1}$"
        put = 345987126
        call random_seed(put, get)
        #:if t1[0] == "r"
        gshape = 2.0_${k1}$; scale = 1.0_${k1}$
        #:else
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        x1 = gamma_rvs(gshape, scale)
        x2 = reshape(gamma_rvs(gshape, scale, 12), [3,4])
        res(:,1) = gamma_pdf(x1, gshape, scale)
        res(:, 2:5) = gamma_pdf(x2, gshape, scale)
        call check(all(abs(res - reshape(ans, [3,5])) < sptol),                &
            msg="gamma_distribution_pdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_gamma_pdf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), gshape, scale
        real :: res(3,5)
        integer :: i, n
        integer :: put, get
        #:if t1[0] == "r"
        real, parameter :: ans(15) =                                           &
                         [5.48762567E-02, 5.48762567E-02, 5.48762567E-02,      &
                          0.315411955, 0.385681599, 0.232208580, 0.393366873,  &
                          0.805594206, 0.886319339, 0.376679629, 0.141763687,  &
                          0.455908805, 0.278569371, 0.181033060, 0.729863822]
        #:else
        real, parameter :: ans(15) =                                           &
                         [3.21221203E-02, 3.21221203E-02, 3.21221203E-02,      &
                          0.209311500,0.779570222, 0.170826405, 2.75949780E-02,&
                          2.37940717E-02, 5.22981845E-02, 0.223270506,         &
                          0.273653150, 3.49688679E-02,0.580260038, 0.230904028,&
                          0.250726104]
        #:endif

        print *, "Test gamma_distribution_cdf_${t1[0]}$${k1}$"
        put = 567985123
        call random_seed(put, get)
        #:if t1[0] == "r"
        gshape = 2.0_${k1}$; scale = 2.0_${k1}$
        #:else
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
        #:endif
        x1 = gamma_rvs(gshape, scale)
        x2 = reshape(gamma_rvs(gshape, scale, 12), [3,4])
        res(:,1) = gamma_cdf(x1, gshape, scale)
        res(:, 2:5) = gamma_cdf(x2, gshape, scale)
        call check(all(abs(res - reshape(ans,[3,5])) < sptol),                 &
            msg="gamma_distribution_cdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_gamma_cdf_${t1[0]}$${k1}$

    #:endfor
end program test_distribution_gamma
