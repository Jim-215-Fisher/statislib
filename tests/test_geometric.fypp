#:include "common.fypp"
program test_distribution_geometric
    use stdlib_kinds
    use stdlib_error, only : check
    use stdlib_stats_distribution_PRNG, only : random_seed
    use statislib_geometric, geo_rvs => geometric_distribution_rvs,            &
                             geo_pmf => geometric_distribution_pmf,            &
                             geo_cdf => geometric_distribution_cdf

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get


    put = 1234567
    call random_seed(put, get)

    call test_geometric_random_generator

    call test_geometric_rvs

    #:for k1, t1 in INT_KINDS_TYPES
    call test_geometric_pmf_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
    call test_geometric_cdf_${t1[0]}$${k1}$
    #:endfor




contains

    subroutine test_geometric_random_generator

        integer, parameter :: num = 10000000
        integer, parameter :: array_size = 1000
        integer :: i, j, freq(0:array_size - 1)
        real(dp) :: chisq, expct
        real :: p

        print *, ""
        print *, "Test geometric random generator with chi-squared"
        freq = 0; p = 0.34
        do i = 1, num
            j = geo_rvs(p)
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        do i = 0, array_size -1
           expct = num * exp(log(p) + i * log (1. - p) )
           if(expct < 1.0e-7) cycle
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
                   //" 1143.92"
        write(*,*) "Chi-squared for geometric random generator is : ", chisq
        call check((chisq < 1143.9),                                           &
               msg="geometric randomness failed chi-squared test", warn=warn)
    end subroutine test_geometric_random_generator





    subroutine test_geometric_rvs

        real :: p
        integer :: seed, get, res(10), i
        integer, parameter :: ans(10) = [11, 0, 5, 2, 6, 2, 0, 0, 0, 2]

        print *, "Test geometric_distribution_rvs"
        seed = 852693417
        call random_seed(seed, get)
        p = 0.16
        do i = 1, 5
          res(i) = geo_rvs(p)
        end do
        res(6:10) = geo_rvs(p, 5)
        call check(all(res == ans),                                            &
            msg="geometric_distribution_rvs failed", warn=warn)
    end subroutine test_geometric_rvs




    #:for k1, t1 in INT_KINDS_TYPES
    subroutine test_geometric_pmf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(2,3,3)
        integer :: seed, get
        real :: p, res(2,3,4)
        real, parameter :: ans(24) =                                           &
                         [0.239999995, 0.239999995, 0.239999995, 0.239999995,  &
                          0.239999995, 0.239999995, .239999995, 3.93215712E-04,&
                          0.239999995, 0.600000024,1.53599977E-02, 0.600000024,&
                          0.239999995, 0.600000024,0.600000024, 9.59999934E-02,&
                          9.59999934E-02, 9.59999934E-02, 0.600000024,         &
                          0.600000024, 0.600000024, 0.239999995, 0.600000024,  &
                          0.239999995]

        print *, "Test geometric_distribution_pmf_${k1}$"
        seed = 630852741
        call random_seed(seed, get)
        p = 0.6
        x1 = geo_rvs(p)
        x2 = reshape(geo_rvs(p, 18), [2,3,3])
        res(:,:,1) = geo_pmf(x1, p)
        res(:,:,2:4) = geo_pmf(x2, p)
        call check(all(abs(res - reshape(ans, [2,3,4])) < sptol),              &
            msg="geometric_distribution_pmf_${k1}$ failed", warn=warn)
    end subroutine test_geometric_pmf_${t1[0]}$${k1}$

    #:endfor





    #:for k1, t1 in INT_KINDS_TYPES
    subroutine test_geometric_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x(2,3,4)
        integer :: seed, get
        real :: p, res(2,3,4)
        real, parameter :: ans(24) =                                           &
                         [0.399999976, 0.399999976, 0.399999976, 0.870399952,  &
                          0.972006381, 0.922240019, 0.399999976, 0.399999976,  &
                          0.399999976, 0.639999986, 0.783999920, 0.922240019,  &
                          0.399999976, 0.783999920, 0.639999986, 0.783999920,  &
                          0.783999920, 0.639999986, 0.399999976, 0.639999986,  &
                          0.639999986, 0.783999920, 0.399999976, 0.953343987]

        print *, "Test geometric_distribution_cdf_${k1}$"
        seed = 17428396
        call random_seed(seed, get)
        p = 0.4
        x = reshape(geo_rvs(p, 24), [2,3,4])
        res(:,:,:) = geo_cdf(x, p)
        call check(all(abs(res - reshape(ans, [2,3,4])) < sptol),              &
            msg="geometric_distribution_cdf_${k1}$ failed", warn=warn)
    end subroutine test_geometric_cdf_${t1[0]}$${k1}$

  #:endfor

end program test_distribution_geometric
