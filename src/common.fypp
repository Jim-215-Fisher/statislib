#! Real kinds to be considered during templating
#:set REAL_KINDS = ["sp", "dp", "qp"]

#! Real types to be considered during templating
#:set REAL_TYPES = ["real({})".format(k) for k in REAL_KINDS]

#! Collected (kind, type) tuples for real types
#:set REAL_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES))

#! Complex kinds to be considered during templating
#:set CMPLX_KINDS = ["sp", "dp", "qp"]

#! Complex types to be considered during templating
#:set CMPLX_TYPES = ["complex({})".format(k) for k in CMPLX_KINDS]

#! Collected (kind, type) tuples for complex types
#:set CMPLX_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES))

#! Integer kinds to be considered during templating
#:set INT_KINDS = ["int8", "int16", "int32", "int64"]

#! Integer types to be considered during templating
#:set INT_TYPES = ["integer({})".format(k) for k in INT_KINDS]

#! Collected (kind, type) tuples for integer types
#:set INT_KINDS_TYPES = list(zip(INT_KINDS, INT_TYPES))

#! Compare any two types and get the stronger type and kind results
#:def comp(kk1, tt1, kk2, tt2)
  #:global res_type
  #:global res_kind
  #:if t1[0] == "i"
    #:if t2[0] == "i"
      #:set n1, n2 = int(k1[3:]), int(k2[3:])
      #:if n1 <= n2
        #:set res_type, res_kind = t2, k2
      #:else
        #:set res_type, res_kind = t1, k1
      #:endif
    #:else
      #:set res_type, res_kind = t2, k2
    #:endif
  #:elif t1[0] == "r"
    #:if t2[0] == "i"
      #:set res_type, res_kind = t1, k1
    #:elif t2[0] == "c"
      #:set res_type, res_kind = t2, k2
    #:elif k1 == "qp"
      #:set res_type, res_kind = t1, k1
    #:elif k1 == "sp"
      #:set res_type, res_kind = t2, k2
    #:elif k1 == "dp" and k2 != "qp"
      #:set res_type, res_kind = t1, k1
    #:else
      #:set res_type, res_kind = t2, k2
    #:endif
  #:else
    #:if t2[0] != "c"
      #:set res_type, res_kind = t1, k1
    #:elif k1 == "qp"
      #:set res_type, res_kind = t1, k1
    #:elif k1 == "sp"
      #:set res_type, res_kind = t2, k2
    #:elif k1 == "dp" and k2 != "qp"
      #:set res_type, res_kind = t1, k1
    #:else
      #:set res_type, res_kind = t2, k2
    #:endif
  #:endif
#:enddef
