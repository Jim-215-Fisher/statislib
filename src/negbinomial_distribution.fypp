#:include "common.fypp"
module statislib_negbinomial
    use stdlib_kinds
    use stdlib_error, only : error_stop
    use statislib_uniform, only : uni=>uniform_distribution_rvs
    use statislib_gamma, only : rgamma=>gamma_distribution_rvs
    use statislib_poisson, only: rpois=>poisson_distribution_rvs
    use special_function, only : inbeta=>incomplete_beta, lgf=>log_factorial

    implicit none
    private
    public :: negbinomial_distribution_rvs
    public :: negbinomial_distribution_pmf
    public :: negbinomial_distribution_cdf



    interface negbinomial_distribution_rvs
    !! Version 0.1
    !!
    !! Negative Binomial Distribution Random Variates
    !! ([Document](../doc/statislib_negbinomial.md))
    !!
        #:for k1, t1 in INT_KINDS_TYPES
        module procedure nb_dist_rvs_${t1[0]}$${k1}$       !2 dummies
        #:endfor

        #:for k1, t1 in INT_KINDS_TYPES
        module procedure nb_dist_rvs_array_${t1[0]}$${k1}$ !3 dummies
        #:endfor
    end interface negbinomial_distribution_rvs



    interface negbinomial_distribution_pmf
    !! Version 0.1
    !!
    !! Negative Binomial Distribution Probability Density Function
    !! ([Document](../doc/statislib_negbinomial.md))
    !!
        #:for k1, t1 in INT_KINDS_TYPES
        module procedure nb_dist_pmf_${t1[0]}$${k1}$
        #:endfor
    end interface negbinomial_distribution_pmf



    interface negbinomial_distribution_cdf
    !! Version 0.1
    !!
    !! Negative Binomial Distribution Cumulative Distribution Function
    !! ([Document](../doc/statislib_negbinomial.md))
    !!
        #:for k1, t1 in INT_KINDS_TYPES
        module procedure nb_dist_cdf_${t1[0]}$${k1}$
        #:endfor
    end interface negbinomial_distribution_cdf




contains

    #:for k1, t1 in INT_KINDS_TYPES
    impure elemental function nb_dist_rvs_${t1[0]}$${k1}$(n0, p0) result(res)
    !
    ! Nono-uniform Random Variate Generation, Luc Devroye, 1986, p. 488
    !
    ! Fortran program by Jim-215-Fisher
    !
        ${t1}$, intent(in) :: n0
        ${t1}$ :: res
        real, intent(in) :: p0
        ${t1}$, save :: n = 0
        real, save :: p = 0.0, q, lgp
        integer :: i, k, m
        real :: u, y

        if(n0 <= 0 ) call error_stop("Error(nb_dist_rvs): Negative Binomial"   &
            //" success trial number n must be positive integer")
        if(p0 < 0 .or. p0 > 1) call error_stop("Error(nb_dist_rvs): "          &
            //"Probability must be in the range [0.0, 1.0]")
        if(p /= p0) then
            p = p0; lgp = 1. / log(1. - p); q = p / (1. - p)
            if(n0 /= n) n = n0
        elseif(n /= n0) then
            n = n0
        end if
        if(n < 10_${k1}$) then
            k = 0
            m = int(n)
            do i = 1, m
                u = log(uni( )) * lgp
                k = k + int(u)
            end do
            res = int(k, ${k1}$)
        else
            y = rgamma(real(n), q)
            res = int(rpois(y), ${k1}$)
        end if
    end function nb_dist_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in INT_KINDS_TYPES
    function nb_dist_rvs_array_${t1[0]}$${k1}$(n0, p0, array_size) result(res)
    
        ${t1}$, intent(in) :: n0
        integer, intent(in) :: array_size
        real, intent(in) :: p0
        ${t1}$ :: res(array_size)
        ${t1}$, save :: n = 0
        real, save :: p = 0.0, q, lgp
        integer :: i, j, k, m
        real :: u, y

        if(n0 <= 0 ) call error_stop("Error(nb_dist_rvs): Negative Binomial"   &
            //" success trial number n must be positive integer")
        if(p0 < 0 .or. p0 > 1) call error_stop("Error(nb_dist_rvs): "          &
            //"Probability must be in the range [0.0, 1.0]")

        if(p /= p0) then
            p = p0; lgp = 1. / log(1. - p); q = p / (1. - p)
            if(n0 /= n) n = n0
        elseif(n /= n0) then
            n = n0
        end if
        if(n < 10_${k1}$) then
            m = int(n)
            do j = 1, array_size
                k = 0
                do i = 1, m
                    u = log(uni( )) * lgp
                    k = k + int(u)
                end do
                res(j) = int(k, ${k1}$)
            end do
        else
            do i = 1, array_size
                y = rgamma(real(n), q)
                res(i) = int(rpois(y), ${k1}$)
            end do
        end if
    end function nb_dist_rvs_array_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in INT_KINDS_TYPES
    impure elemental function nb_dist_pmf_${t1[0]}$${k1}$(k, n, p) result(res)
    !
    ! Negative Binomial Probability Mass Function
    !
        ${t1}$, intent(in) :: k, n
        real :: res
        real, intent(in) :: p

        res = exp(lgf(n+k-1) + n * log(p) + k * log(1-p) - lgf(n-1) - lgf(k))
    end function nb_dist_pmf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in INT_KINDS_TYPES
    impure elemental function nb_dist_cdf_${t1[0]}$${k1}$(k, n, p) result(res)
    !
    ! Negative Binomial Probability Distribution Function
    !
        ${t1}$, intent(in) :: k, n
        real, intent(in) :: p
        real :: res

        res = 1.0 - inbeta(p, real(k + 1), real(n))
    end function nb_dist_cdf_${t1[0]}$${k1}$

    #:endfor

end module statislib_negbinomial
