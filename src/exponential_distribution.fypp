#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module statislib_exponential
    use stdlib_kinds
    use stdlib_error, only : error_stop
    use stdlib_stats_distribution_PRNG, only : dist_rand
    use statislib_uniform, only : uni=>uniform_distribution_rvs

    implicit none
    private
    real(dp), parameter  :: HALF = 0.5_dp, ONE = 1.0_dp, TWO = 2.0_dp
    integer :: ke(0:255)
    real(dp) :: we(0:255), fe(0:255)
    logical  :: zig_exp_initialized = .false.

    public :: exponential_distribution_rvs
    public :: exponential_distribution_pdf
    public :: exponential_distribution_cdf


    interface exponential_distribution_rvs
    !! Version 0.1
    !!
    !! Exponential Distribution Random Variates
    !! ([Document](../doc/exponential_distribution.md))
    !!
        module procedure exp_dist_rvs_0_rsp                 !0 dummy variable

        #:for k1, t1 in RC_KINDS_TYPES
        module procedure exp_dist_rvs_${t1[0]}$${k1}$       !1 dummy variable
        #:endfor

        #:for k1, t1 in RC_KINDS_TYPES
        module procedure exp_dist_rvs_array_${t1[0]}$${k1}$ !2 dummy variables
        #:endfor
    end interface exponential_distribution_rvs



    interface exponential_distribution_pdf
    !! Version 0.1
    !!
    !! Exponential Distribution Probability Density Function
    !! ([Document](../doc/exponential_distribution.md))
    !!
        #:for k1, t1 in RC_KINDS_TYPES
        module procedure exp_dist_pdf_${t1[0]}$${k1}$
        #:endfor
    end interface exponential_distribution_pdf



    interface exponential_distribution_cdf
    !! Version 0.1
    !!
    !! Exponential Distribution Cumulative Distribution Function
    !! ([Document](../doc/exponential.md))
    !!
        #:for k1, t1 in RC_KINDS_TYPES
        module procedure exp_dist_cdf_${t1[0]}$${k1}$
        #:endfor
    end interface exponential_distribution_cdf





contains



    subroutine zigset
    ! Marsaglia & Tsang generator for random normals & random exponentials.
    ! Translated from C by Alan Miller (amiller@bigpond.net.au)
    !
    ! Marsaglia, G. & Tsang, W.W. (2000) `The ziggurat method for generating
    ! random variables', J. Statist. Software, v5(8).
    !
    ! This is an electronic journal which can be downloaded from:
    ! http://www.jstatsoft.org/v05/i08
    !
    ! N.B. It is assumed that all integers are 32-bit.
    ! N.B. The value of M2 has been halved to compensate for the lack of
    !      unsigned integers in Fortran.
    !
    ! Latest version - 1 January 2001
    !
    ! Fotran 90 program translated from C by Jim-215-Fisher
    !
        real(dp), parameter :: M2 = 2147483648.0_dp
        real(dp)            :: de = 7.697117470131487_dp, te,                  &
                               ve = 0.003949659822581572_dp, q
        integer :: i

        te = de
        !  tables for random exponetials
        q = ve * exp( de )
        ke(0) = int((de / q) * M2, kind = int32)
        ke(1) = 0
        we(0) = q / M2
        we(255) = de / M2
        fe(0) = ONE
        fe(255) = exp( -de )
        do  i = 254, 1, -1
            de = -log( ve / de + exp( -de ) )
            ke(i+1) = int(M2 * (de / te), kind = int32)
            te = de
            fe(i) = exp( -de )
            we(i) = de / M2
        end do
        zig_exp_initialized = .true.
    end subroutine zigset



    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function exp_dist_rvs_0_${t1[0]}$${k1}$( ) result(res)
    !
    ! Exponential distributed random variate with lamda = 1
    !
        ${t1}$ :: res, x
        ${t1}$ :: r = 7.69711747013104972_${k1}$
        integer :: jz, iz

        if( .not. zig_exp_initialized ) call zigset

        ! Original algorithm use 32bit
        iz = 0
        jz = dist_rand(1_int32)

        iz = iand( jz, 255 )
        if( abs( jz ) < ke(iz) ) then
            res = abs(jz) * we(iz)
        else
            L1: do
                if( iz == 0 ) then
                    res = r - log( uni(1.0_${k1}$) )
                    exit L1
                end if
                x = abs( jz ) * we(iz)
                if(fe(iz)+uni(1.0_${k1}$)*(fe(iz-1)-fe(iz)) < exp(-x)) then
                    res = x
                    exit L1
                end if

                !original algorithm use 32bit
                jz = dist_rand(1_int32)
                iz = iand( jz, 255 )
                if( abs( jz ) < ke(iz) ) then
                    res = abs( jz ) * we(iz)
                    exit L1
                end if
           end do L1
       endif
    end function exp_dist_rvs_0_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function exp_dist_rvs_${t1[0]}$${k1}$(lamda) result(res)
    !
    ! Exponential distributed random variate
    !
        ${t1}$, intent(in) :: lamda
        ${t1}$ :: res

        if(lamda <= 0.0_${k1}$) call error_stop("Error(exp_dist_rvs): Exponen" &
            //"tial distribution lamda parameter must be greater than zero")

        res = exp_dist_rvs_0_${t1[0]}$${k1}$(  ) / lamda
    end function exp_dist_rvs_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function exp_dist_rvs_${t1[0]}$${k1}$(lamda) result(res)

        ${t1}$, intent(in) :: lamda
        ${t1}$ :: res
        real(${k1}$) :: tr, ti

        tr = exp_dist_rvs_r${k1}$(lamda % re )
        ti = exp_dist_rvs_r${k1}$(lamda % im)
        res = cmplx(tr, ti, kind=${k1}$)
    end function exp_dist_rvs_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in REAL_KINDS_TYPES
    function exp_dist_rvs_array_${t1[0]}$${k1}$(lamda, array_size) result(res)

        ${t1}$, intent(in) :: lamda
        integer, intent(in) :: array_size
        ${t1}$ :: res(array_size)
        ${t1}$ :: x, re
        ${t1}$ :: r = 7.69711747013104972_${k1}$
        integer :: jz, iz, i

        if(lamda <= 0.0_${k1}$) call error_stop("Error(exp_dist_rvs_array): "  &
            //"Exponential distribution lamda parameter must be greater than " &
            //" zero")

        if( .not. zig_exp_initialized ) call zigset
        do i =1, array_size
            ! Original algorithm use 32bit
            iz = 0
            jz = dist_rand(1_int32)

            iz = iand( jz, 255 )
            if( abs( jz ) < ke(iz) ) then
                re = abs(jz) * we(iz)
            else
                L1: do
                    if( iz == 0 ) then
                        re = r - log( uni(1.0_${k1}$) )
                        exit L1
                    end if
                    x = abs( jz ) * we(iz)
                    if(fe(iz)+uni(1.0_${k1}$)*(fe(iz-1)-fe(iz)) < exp(-x)) then
                        re = x
                        exit L1
                    end if

                    !original algorithm use 32bit
                    jz = dist_rand(1_int32)
                    iz = iand( jz, 255 )
                    if( abs( jz ) < ke(iz) ) then
                        re = abs( jz ) * we(iz)
                        exit L1
                    end if
               end do L1
            endif
            res(i) = re / lamda
        end do
    end function exp_dist_rvs_array_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in CMPLX_KINDS_TYPES
    function exp_dist_rvs_array_${t1[0]}$${k1}$(lamda, array_size) result(res)

        ${t1}$, intent(in) :: lamda
        integer, intent(in) :: array_size
        ${t1}$ :: res(array_size)
        real(${k1}$) :: tr(array_size), ti(array_size)

        tr = exp_dist_rvs_array_r${k1}$(lamda % re, array_size)
        ti = exp_dist_rvs_array_r${k1}$(lamda % im, array_size)
        res = cmplx(tr, ti, kind=${k1}$)
    end function exp_dist_rvs_array_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function exp_dist_pdf_${t1[0]}$${k1}$(x, lamda) result(res)
    !
    ! Exponential Distribution Probability Density Function
    !
        ${t1}$, intent(in) :: x, lamda
        real :: res

        if(lamda <= 0.0_${k1}$) call error_stop("Error(exp_dist_pdf): Exponen" &
            //"tial distribution lamda parameter must be greater than zero")
        if(x < 0.0_${k1}$) call error_stop("Error(exp_dist_pdf): Exponential"  &
            //" distribution variate x must be non-negative")
        res = exp(- x * lamda) * lamda
    end function exp_dist_pdf_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function exp_dist_pdf_${t1[0]}$${k1}$(x, lamda) result(res)
        ${t1}$, intent(in) :: x, lamda
        real :: res

        res = exp_dist_pdf_r${k1}$(x % re, lamda % re)
        res = res * exp_dist_pdf_r${k1}$(x % im, lamda % im)
    end function exp_dist_pdf_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function exp_dist_cdf_${t1[0]}$${k1}$(x, lamda) result(res)
    !
    ! Exponential Cumulative Distribution Function
    !
        ${t1}$, intent(in) :: x, lamda
        real :: res

        if(lamda <= 0.0_${k1}$) call error_stop("Error(exp_dist_cdf): Exponen" &
            //"tial distribution lamda parameter must be greater than zero")
        if(x < 0.0_${k1}$) call error_stop("Error(exp_dist_cdf): Exponential"  &
            //" distribution variate x must be non-negative")
        res = (1.0 - exp(- x * lamda))
    end function exp_dist_cdf_${t1[0]}$${k1}$

    #:endfor



    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function exp_dist_cdf_${t1[0]}$${k1}$(x, lamda) result(res)

        ${t1}$, intent(in) :: x, lamda
        real :: res

        res = exp_dist_cdf_r${k1}$(x % re, lamda % re)
        res = res * exp_dist_cdf_r${k1}$(x % im, lamda % im)
    end function exp_dist_cdf_${t1[0]}$${k1}$

    #:endfor
end module statislib_exponential
